# -*- coding: utf-8 -*-
"""ISL_Week2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O7-rhSzPnOFQvpuJ6dNhAwayZmG6Gvh3
"""

import pandas as pd

df=pd.read_csv('/content/Crop_recommendation.csv')

from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import LabelEncoder
import sklearn.metrics as metrics

lab_enc=LabelEncoder()

X = df.drop('label', axis = 1)
y = df['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8)

"""*Random forest*"""

from sklearn.ensemble import RandomForestClassifier

randomforest = RandomForestClassifier(n_estimators=30, random_state=0)

randomforest.fit(X_train,y_train)

predicted_values = randomforest.predict(X_test)

random_forest_acc = metrics.accuracy_score(y_test, predicted_values)

random_forest_acc*100

from sklearn.metrics import confusion_matrix

r_f=confusion_matrix(y_test,predicted_values)

sb.heatmap(r_f, annot=True, linewidth=1.0,cmap='PuBu')

"""*LOGISTIC* REGRESSION"""

from sklearn.linear_model import LogisticRegression
l_r=LogisticRegression(solver='liblinear',multi_class='ovr')
l_r.fit(X_train,y_train)
predicted_values = l_r.predict(X_test)
lr_acc = metrics.accuracy_score(y_test, predicted_values)

lr_acc*100

lr=confusion_matrix(y_test,predicted_values)
sb.heatmap(lr, annot=True, linewidth=1.0,cmap='PuBu')

"""Decision tree

"""

from sklearn.tree import DecisionTreeClassifier

dt = DecisionTreeClassifier(random_state=42).fit(X_train, y_train)

predicted_values = dt.predict(X_test)

dt_acc=metrics.accuracy_score(y_test,predicted_values)

dt_acc*100

lr=confusion_matrix(y_test,predicted_values)
sb.heatmap(lr, annot=True, linewidth=1.0,cmap='PuBu')

print('accuracy for Random Forest: ',random_forest_acc*100)
print('accuracy for Logistic Regression: ',lr_acc*100)
print('accuracy for Decision Tree: ',dt_acc*100)